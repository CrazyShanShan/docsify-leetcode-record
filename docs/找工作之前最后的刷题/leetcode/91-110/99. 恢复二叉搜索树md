## [99. 恢复二叉搜索树](https://leetcode-cn.com/problems/recover-binary-search-tree/)

**分析：**

```
Morris，需要背诵
算法流程：
1. 从根节点开始遍历，直到当前节点为空为止：
	1. 如果当前节点没有左儿子，则打印当前节点的值，然后进入右子树；
	2. 如果当前节点有左儿子，则去寻找当前节点的前驱节点：
		1. 如果前驱节点的右儿子为空，说明左子树没有遍历过，则进入左子树遍历，并将前驱节点的右儿子设置为当前节点，方便回溯。
		2. 如果前驱节点的右儿子为当前节点，说明左子树已被遍历过，则将前驱节点的有儿子恢复为空，然后打印当前节点的值，然后进入右子树继续遍历。
```

**代码：**

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;  
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void recoverTree(TreeNode root) {
        TreeNode first = null, second = null, pre = null;
        
        while (root != null) {
            if (root.left == null) {
                if (pre != null && pre.val >= root.val) {
                    if (first == null) {
                        first = pre;
                        second = root;
                    } else second = root;
                }
                pre = root;
                root = root.right;
            } else {
                TreeNode p = root.left;
                while (p.right != null && p.right != root) p = p.right;
                if (p.right == null) {
                    p.right = root;
                    root = root.left;
                } else {
                    p.right = null;
                    if (pre != null && pre.val >= root.val) {
                        if (first == null) {
                            first = pre;
                            second = root;
                        } else second = root;
                    }
                    pre = root;
                    root = root.right;
                }
            }
        }
        int tmp = first.val;
        first.val = second.val;
        second.val = tmp;
    }
}
```

